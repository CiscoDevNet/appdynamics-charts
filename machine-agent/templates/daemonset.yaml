{{- if .Values.daemonset.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "machine-agent.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "machine-agent.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    chart: {{ template "machine-agent.chart" . }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "machine-agent.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "machine-agent.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.daemonset.image.repository }}:{{ .Values.daemonset.image.tag }}"
        imagePullPolicy: {{ .Values.daemonset.image.pullPolicy }}
        ports:
          - name: analytics
            containerPort: {{ .Values.daemonset.port }}
        env:
        - name: APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: appd-secret
              key: appd-key        
        {{- range $key, $value := .Values.daemonset.envValueFrom }}
        - name: {{ $key }}
          valueFrom:
{{ toYaml $value | indent 12 }}
        {{- end }}
        {{- range $key, $value := .Values.daemonset.envValueFromConfigMap }}
        - name: {{ $key }}
          valueFrom:
            configMapKeyRef:
              name: {{ default (include "machine-agent.fullname" $) $value.name }}
              {{- if $value.key }}
              key: {{ required "Must specify key!" $value.key }}
              {{- end}}
        {{- end }}
        {{- if .Values.daemonset.envFromConfigMap }}
        envFrom:
        {{- range $value := .Values.daemonset.envFromConfigMap }}
        - configMapRef:
            name: {{ $value }}
        {{- end }}
        {{- end }}
        {{- if .Values.daemonset.podSecurityContext }}
        securityContext:
{{ toYaml .Values.daemonset.podSecurityContext | indent 10}}
        {{- end }}
        resources:
{{- if .Values.daemonset.resources }}
{{ toYaml .Values.daemonset.resources | indent 10 }}
{{- else if .Values.resources }}
{{ toYaml .Values.resources | indent 10 }}
{{- end }}
        volumeMounts:
        - name: ma-log-volume
          mountPath: /opt/appdynamics/conf/logging/log4j.xml
          subPath: log4j.xml
        - name: hostroot
          mountPath: /hostroot
          readOnly: true
        - name: docker-sock
          mountPath: /var/run/docker.sock
{{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 8 }}
{{- end }}
{{- if .Values.agent.netviz }}
      - name: appd-netviz-agent
        image: "{{ .Values.agent.netvizImage.repository }}:{{ .Values.agent.netvizImage.tag }}"
        imagePullPolicy: {{ .Values.agent.netvizImage.pullPolicy }}
        ports:
        - containerPort: {{ .Values.agent.netvizPort }}
          hostPort: {{ .Values.agent.netvizPort }}
          protocol: TCP
        resources:
{{- if .Values.daemonset.netvizResources }}
{{ toYaml .Values.daemonset.netvizResources | indent 10 }}
{{- end }}
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
        volumeMounts:
        - mountPath: /netviz-agent/conf/agent_config.lua
          name: netviz-volume
          subPath: agent_config.lua
      hostIPC: true
      hostNetwork: true
      hostPID: true
{{- end }}
      volumes:
      - name: ma-log-volume
        configMap:
          name: ma-log-config
      - name: hostroot
        hostPath:
          path: /
{{- if .Values.agent.netviz }}
      - name: netviz-volume
        configMap:
          name: netviz-config
{{- end }}
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 6 }}
{{- end }}
      terminationGracePeriodSeconds: 30
      {{- if .Values.daemonset.priorityClassName }}
      priorityClassName: {{ .Values.daemonset.priorityClassName }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
{{- if .Values.daemonset.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.daemonset.nodeSelector | indent 8 }}
{{- end }}
{{- if or (.Values.daemonset.tolerations) (.Values.agent.includeMasters)  }}
      tolerations:
{{- if .Values.agent.includeMasters }}
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
{{- end }}
{{- if .Values.daemonset.tolerations }}
{{ toYaml .Values.daemonset.tolerations | indent 8 }}
{{- end }}
{{- end }}
{{- end }}
